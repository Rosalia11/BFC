@page "/"
@using BFC.Web.Data.Dtos
@using BFC.Web.Data.Services
@inject IRecetasServices RecetaService
@inject NavigationManager Nav
@rendermode InteractiveServer


<div class="search-bar">
    <input type="text" @bind="textoBusqueda" placeholder="Buscar recetas o categorías"
           class="form-control" />
</div>

<h2 class="title">Recetas</h2>

@if (Filtradas is null)
{
    <p>Cargando…</p>
}
else if (!Filtradas.Any())
{
    <p>No se encontraron recetas.</p>
}
else
{
    <div class="card-container">
        @foreach (var r in Filtradas)
        {
            <div class="card">
                <img src="@r.Imagen" alt="@r.Nombre" class="card-img" />

                <div class="card-body">
                    <h3>@r.Nombre</h3>
                    <p class="categoria">@r.Categoria</p>

                    <button class="btn-ver"
                            @onclick="() => IrAlDetalle(r.Id_Recetas)">
                        Ver
                    </button>

                    <p class="tiempo">
                        Tiempo de preparación<br />
                        <strong>@r.Tiempo_preparacion</strong>
                    </p>
                </div>
                <button class="heart"
                        title="Me gusta"
                        @onclick="() => ToggleFav(r.Id_Recetas)">
                    @(Favoritas.Contains(r.Id_Recetas) ? "💖" : "🤍")
                </button>
            </div>
        }
    </div>
}

@code {
    private List<RecestasDtos>? recetas;     
    private List<RecestasDtos>? recetasHome;
    private IEnumerable<RecestasDtos>? recetasFiltradas;
    private HashSet<int> Favoritas = new();
    private string textoBusqueda = string.Empty;

    private readonly string[] categoriasHome =
        { "Ensaladas", "Sopas y Cremas", "Pastas", "Postres", "Bowls" };

    protected override async Task OnInitializedAsync()
    {
        recetas = (await RecetaService.GetAllAsync()).ToList();
        ConstruirHome();
    }

    void ToggleFav(int id)
    {
        if (!Favoritas.Add(id))
            Favoritas.Remove(id);
    }
    void Filtrar()
    {
        IEnumerable<RecestasDtos> baseLista = recetas!;

        if (!string.IsNullOrWhiteSpace(textoBusqueda))
            baseLista = baseLista.Where(r =>
                r.Nombre.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                r.Categoria.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase));

        recetasFiltradas = baseLista.Take(5).ToList();  
    }
    void IrAlDetalle(int id) => Nav.NavigateTo($"/receta/{id}");
    void ConstruirHome()
    {
        recetasHome = categoriasHome
            .Select(cat => recetas!
                .FirstOrDefault(r => r.Categoria == cat)) 
            .Where(r => r is not null)
            .ToList()!;
    }
    IEnumerable<RecestasDtos> Filtradas =>
        string.IsNullOrWhiteSpace(textoBusqueda)
            ? recetasHome!
            : recetasHome!
                .Where(r => r.Nombre.Contains(textoBusqueda,
                            StringComparison.OrdinalIgnoreCase) ||
                            r.Categoria.Contains(textoBusqueda,
                            StringComparison.OrdinalIgnoreCase));
}

